# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  namespace: helm-test
  
  # PostgreSQL connection info (used by backend)
  postgresql:
    auth:
      username: "<DB_USER>"
      password: "<DB_PASSWORD>"
      database: "ai-sw-ide"
  
  # Environment-specific configurations
  environment:
    # NFS Server Configuration
    nfs:
      address: "<YOUR_NFS_SERVER_IP>"
    
    # Kubernetes Node Names
    nodes:
      workers: "<YOUR_WORKER_NODE_NAMES>(comma-separated: e.g. k8s-worker-1,k8s-worker-2)"
    
    # External Service URLs
    services:
      prometheus: "<YOUR_PROMETHEUS_ADDRESS>"
      redis: "redis://<YOUR_REDIS_HOST>:6379/0"
    
    # CORS Configuration
    cors:
      origins: "http://ai-sw-ide-frontend.ai-sw-ide.svc.cluster.local:4000,http://localhost:4000,http://127.0.0.1:4000"
    
    # Application Settings
    app:
      logLevel: "INFO"
      gpuFetchInterval: "30"
      secretAlgorithm: "HS256"
      secretKey: "okestro"

# Common labels
commonLabels:
  app.kubernetes.io/name: ai-sw-ide
  app.kubernetes.io/instance: ai-sw-ide
  app.kubernetes.io/version: "1.0.0"
  app.kubernetes.io/component: ai-sw-ide

# Backend configuration
backend:
  enabled: true
  replicaCount: 1
  
  image:
    repository: <REGISTRY_ADDRESS>/ai-sw-ide/backend
    tag: "1.0.4"
    pullPolicy: IfNotPresent
  
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  
  rbac:
    create: true
  
  service:
    type: NodePort
    port: 8000
    targetPort: 8000
    nodePort: 30800
  
  ingress:
    enabled: false
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  # Health Check configuration
  healthCheck:
    enabled: true
    path: "/"
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 5
  
  # ConfigMap data (values from global.environment)
  config:
    APP_PORT: "8000"
    DATA_OBSERVER_URL: "http://data-observer-service.ai-sw-ide.svc.cluster.local:8000"
  
  # Secret data (values from global.environment)
  secrets: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 1
  
  image:
    repository: <REGISTRY_ADDRESS>/ai-sw-ide/frontend 
    tag: "1.0.1"
    pullPolicy: Always
  
  service:
    type: NodePort
    port: 80
    targetPort: 80
    nodePort: 30081
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  # Health Check configuration
  healthCheck:
    enabled: true
    path: "/"
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 5
  
  # ConfigMap data
  config:
    apiUrl: "/api"
    backendServiceUrl: "http://ai-sw-ide-backend-service.ai-sw-ide.svc.cluster.local:8000"
  
  # Additional environment variables
  env: []
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Data Observer configuration
data-observer:
  enabled: true
  replicaCount: 1
  
  image:
    repository: <REGISTRY_ADDRESS>/ai-sw-ide/observer
    tag: "1.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    - name: NFS_ROOT
      value: "/nfsvolume"
  
  # NFS Volume configuration (server from global.environment.nfs.address)
  nfs:
    enabled: true
    path: "/nfsvolume"
    mountPath: "/nfsvolume"
    readOnly: true
  
  # Health Check configuration
  healthCheck:
    enabled: true
    path: "/health"
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 5
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# PostgreSQL configuration (using Bitnami chart)
postgresql:
  enabled: true
  
  auth:
    postgresPassword: "<DB_PASSWORD>"
    username: "<DB_USER>"
    password: "<DB_PASSWORD>"
    database: "ai-sw-ide"
  
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
  
  metrics:
    enabled: false

# Redis configuration (optional)
redis:
  enabled: false
  
  auth:
    enabled: false
  
  master:
    persistence:
      enabled: false
    
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000

# Security Context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80 